---
- name: Clean account from integrations and behavior groups created during the lab
  hosts: localhost
  gather_facts: no
  vars:
    # HCC service account credentials
    hcc_client_id: xxxx
    hcc_client_secret: xxxx
    auth_url: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"
    api_url_notifications: "https://console.redhat.com/api/notifications/v1.0/"
    api_url_integrations: "https://console.redhat.com/api/integrations/v1.0/"
    per_page: 100
    extra_params: "&staleness=fresh&staleness=stale"
    all_hosts: []
  tasks:
    - name: Get Red Hat API access token
      ansible.builtin.uri:
        url: "{{ auth_url }}"
        method: POST
        body_format: form-urlencoded
        status_code: 200
        return_content: true
        headers:
          Content-Type: "application/x-www-form-urlencoded"
        body:
          client_id: "{{ hcc_client_id }}"
          client_secret: "{{ hcc_client_secret }}"
          scope: "api.console"
          grant_type: "client_credentials"
      register: auth_response
      no_log: true
      
    - name: Extract and validate API token
      set_fact:
        rh_api_token: "{{ auth_response.json.access_token }}"
      failed_when: rh_api_token is not defined or rh_api_token | length == 0
      no_log: true

    # The name used in the lab for creating the integration follows '<GUID>-EDAIntegration' naming convention and the the type is 'ansible'
    - name: Fetch integrations for the account
      uri:
        url: "{{ api_url_integrations }}endpoints?name=-EDAIntegration&type=ansible"
        method: GET
        headers:
          Authorization: "Bearer {{ rh_api_token }}"
          Content-Type: "application/json"
        return_content: yes
        status_code: 200
      register: response
      no_log: true

    # - name: Display all retrieved integrations
    #   debug:
    #     msg: "{{ item.name }}"
    #   loop: "{{ response.json.data }}"
    #   when: response.json.data is defined and response.json.data | length > 0

    - name: Delete all integrations
      uri:
        url: "{{ api_url_integrations }}endpoints/{{ item.id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ rh_api_token }}"
          Content-Type: "application/json"
        return_content: no
        status_code: 204
      register: response_int_delete
      no_log: true
      loop: "{{ response.json.data }}"
      when: response.json.data is defined and response.json.data | length > 0 and item.name is defined and '-EDAIntegration' in item.name

    # The behavior group is created in the lab under the Red Hat Enterprise Linux bundle
    - name: Fetch bundle id for the account
      uri:
        url: "{{ api_url_notifications }}notifications/bundles/rhel"
        method: GET
        headers:
          Authorization: "Bearer {{ rh_api_token }}"
          Content-Type: "application/json"
        return_content: yes
        status_code: 200
      register: response_bundle
      no_log: true

    # - name: Display retrieved bundle
    #   debug:
    #     msg: "{{ response_bundle.json.id }} {{ response_bundle.json.name }} {{ response_bundle.json.display_name  }}"
    #   when: response_bundle.json is defined

    # The name used in the lab for creating the behavior group follows '<GUID>-BehaviorGroup' naming convention
    - name: Fetch behavior groups for the account
      uri:
        url: "{{ api_url_notifications }}notifications/bundles/{{ response_bundle.json.id }}/behaviorGroups"
        method: GET
        headers:
          Authorization: "Bearer {{ rh_api_token }}"
          Content-Type: "application/json"
        return_content: yes
        status_code: 200
      register: response_bg
      no_log: true

    # - name: Display all retrieved behavior groups
    #   debug:
    #     msg: "{{ item.id }} {{ item.display_name  }}"
    #   loop: "{{ response_bg.json }}"
    #   when: response_bg.json is defined and response_bg.json | length > 0 and item.display_name is defined and "-BehaviorGroup" in item.display_name

    - name: Delete all behavior groups
      uri:
        url: "{{ api_url_notifications }}notifications/behaviorGroups/{{ item.id }}"
        method: DELETE
        headers:
          Authorization: "Bearer {{ rh_api_token }}"
          Content-Type: "application/json"
        return_content: no
        status_code: 200
      register: response_delete_bg
      no_log: true
      loop: "{{ response_bg.json }}"
      when: response_bg.json is defined and response_bg.json | length > 0 and item.display_name is defined and "-BehaviorGroup" in item.display_name
